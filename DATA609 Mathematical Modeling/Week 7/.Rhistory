#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
#plot(1-rocSpec, rocSens)
return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocData <- rocFunc(useData)
rocData
g <- ggplot(rocData, aes((1 - rocSpec), rocSens)) + geom_step()
g <- ggplot(rocData, aes((1 - SpecRoc), SensRock)) + geom_step()
g
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
g
typeof(rocData)
ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
#truePosRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability >= thresh[i]])
#trueNegRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability <= thresh[i]])
#print(trueNegRoc)
#falsePosRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability >= thresh[i]])
#falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
#falseNegRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability <= thresh[i]])
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
#rocSens[i] <- sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
#plot(1-rocSpec, rocSens)
#return(list(ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step(), ))
return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocData <- rocFunc(useData)
rocData
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
#truePosRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability >= thresh[i]])
#trueNegRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability <= thresh[i]])
#print(trueNegRoc)
#falsePosRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability >= thresh[i]])
#falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
#falseNegRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability <= thresh[i]])
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
#rocSens[i] <- sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRock * specRoc
#plot(1-rocSpec, rocSens)
return(list(g, uac ))
#return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocData
rocData <- rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
#truePosRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability >= thresh[i]])
#trueNegRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability <= thresh[i]])
#print(trueNegRoc)
#falsePosRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability >= thresh[i]])
#falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
#falseNegRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability <= thresh[i]])
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
#rocSens[i] <- sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRock * specRoc
#plot(1-rocSpec, rocSens)
return(list(g, uac ))
#return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocData <- rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
#truePosRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability >= thresh[i]])
#trueNegRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability <= thresh[i]])
#print(trueNegRoc)
#falsePosRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability >= thresh[i]])
#falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
#falseNegRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability <= thresh[i]])
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
#rocSens[i] <- sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRock * specRoc
#plot(1-rocSpec, rocSens)
return(list(g, uac ))
#return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
#truePosRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability >= thresh[i]])
#trueNegRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability <= thresh[i]])
#print(trueNegRoc)
#falsePosRoc[i] <- sum(classDF$class[classDF$class == 0 & classDF$scored.probability >= thresh[i]])
#falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
#falseNegRoc[i] <- sum(classDF$class[classDF$class == 1 & classDF$scored.probability <= thresh[i]])
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
#rocSens[i] <- sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#rocSpec[i] <- specFunc(classDF[round(classDF$scored.probability,2) %in% thresh[1:i],])
#sensFunc(classDF[round(classDF$scored.probability,2) %in% thresh[0:i],])
#classDF[round(classDF$scored.probability,2) %in% thresh[0:i],]
#print(thresh[i:(i+1)])
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
#plot(1-rocSpec, rocSens)
return(list(g, uac ))
#return(cbind.data.frame(sensRoc, specRoc, threshProb, trueNegRoc, falsePosRoc, truePosRoc, falseNegRoc))
}
rocData <- rocFunc(useData)
rocData
accFunc(useData)
classErrFunc(useData)
precFunc(useData)
sensFunc(useData)
specFunc(useData)
f1Func(useData)
rocFunc(useData)
rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(rocData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(g, uac )
}
rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(classDF, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(g, uac )
}
rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
g <- ggplot(classDF, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(list(g, uac) )
}
rocFunc(useData)
useData
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
plotData <- as.data.frame(senseRoc, specRoc)
g <- ggplot(plotData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(list(g, uac) )
}
rocFunc(useData)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
plotData <- as.data.frame(sensRoc, specRoc)
g <- ggplot(plotData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(list(g, uac) )
}
rocFunc(useData)
accFunc(useData)
classErrFunc(useData)
precFunc(useData)
sensFunc(useData)
specFunc(useData)
f1Func(useData)
rocFunc(useData)
install.packages("caret")
library(caret)
confusionMatrix(table(useData[1:2]))
table(useData[1:2])
confusionMatrix(table(useData[1:2]))
sensFunc(useData)
specFunc(useData)
confusionMatrix(useData[1:2])
table(
confusionMatrix(table(useData[1:2]))
confusionMatrix(table(useData[1:2]))
119/(119+27)
119/(119+30)
sensFunc(useData)
sensFunc <- function(classDF){
truePos <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 1])
trueNeg <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 0])
falsePos <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 1])
falseNeg <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 0])
sensRes <- (truePos) / (truePos + falseNeg)
return(sensRes)
}
sensFunc(useData)
truePos
sensFunc <- function(classDF){
truePos <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 1])
trueNeg <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 0])
falsePos <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 1])
falseNeg <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 0])
sensRes <- (truePos) / (truePos + falseNeg)
return(list(sensRes, truePos, falseNeg))
}
sensFunc(useData)
useData[1]
useData[2]
confusionMatrix(table(useData[2], useData[1]))
confusionMatrix(useData[2], useData[1])
useData[2]
confusionMatrix(useData$scored.class, useData$class)
sensFunc(useData)
119/(125)
specFunc(useData)
sensFunc(useData)
accFunc(useData)
confusionMatrix(useData$class, useData$scored.class)
plot.roc(useData$class, useData$scored.probability)
getwd()
setwd("/Users/andrew/Documents/School/Mathematical Modeling/Week 7")
knitr::opts_chunk$set(echo = TRUE)
q320 <- data.frame(alice = c(1,2,0,0,0),
bonnie = c(1,0,0,0,0),
courtney = c(1,2,0,0,0),
deb = c(0,0,3,4,5),
ellen = c(0,2,0,0,0),
fay = c(1,0,0,0,0),
gladys = c(0,0,3,4,0),
hermione = c(0,2,3,0,0),
row.names = 1:5)
q320
library(ggplot)
library(ggplot2)
network(q320,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
install.packages("GGally")
install.packages("network")
install.packages("sna")
library(ggplot2)
library(network)
library(sna)
library(GGally)
q320 <- data.frame(alice = c(1,2,0,0,0),
bonnie = c(1,0,0,0,0),
courtney = c(1,2,0,0,0),
deb = c(0,0,3,4,5),
ellen = c(0,2,0,0,0),
fay = c(1,0,0,0,0),
gladys = c(0,0,3,4,0),
hermione = c(0,2,3,0,0),
row.names = 1:5)
network(q320,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(q320, label = T)
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
knitr::opts_chunk$set(echo = TRUE)
ggnet2(q320, label = T)
library(scales)
library(ggplot2)
library(network)
library(sna)
library(GGally)
q320 <- data.frame(alice = c(1,2,0,0,0),
bonnie = c(1,0,0,0,0),
courtney = c(1,2,0,0,0),
deb = c(0,0,3,4,5),
ellen = c(0,2,0,0,0),
fay = c(1,0,0,0,0),
gladys = c(0,0,3,4,0),
hermione = c(0,2,3,0,0),
row.names = 1:5)
q320 <- network(q320,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(q320, label = T)
q320a <- network(q320a,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
q320a <- data.frame(alice = c(1,1,0,0,0),
bonnie = c(1,0,0,0,0),
courtney = c(1,1,0,0,0),
deb = c(0,0,1,1,1),
ellen = c(0,1,0,0,0),
fay = c(1,0,0,0,0),
gladys = c(0,0,1,1,0),
hermione = c(0,1,1,0,0),
row.names = 1:5)
q320a <- network(q320a,
matrix.type = "bipartite",
ignore.eval = FALSE,
names.eval = "weights")
ggnet2(q320a, label = T)
install.packages("latex")
knitr::opts_chunk$set(echo = TRUE)
rocFunc <- function(classDF){
truePosRoc <- vector()
trueNegRoc <- vector()
falsePosRoc <- vector()
falseNegRoc <- vector()
threshProb <- vector()
thresh <- seq(0, 1, .01)
for (i in 1:100){
threshProb[i] <- thresh[i]
truePosRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability >= thresh[i])
trueNegRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability < thresh[i])
falsePosRoc[i] <- sum(classDF$class == 0 & classDF$scored.probability >= thresh[i])
falseNegRoc[i] <- sum(classDF$class == 1 & classDF$scored.probability < thresh[i])
}
sensRoc <- truePosRoc / (truePosRoc + falseNegRoc)
specRoc <- trueNegRoc / (trueNegRoc + falsePosRoc)
plotData <- as.data.frame(sensRoc, specRoc)
g <- ggplot(plotData, aes((1 - specRoc), sensRoc)) + geom_step()
uac <- sensRoc * specRoc
return(list(g, uac) )
}
rocFunc(useData)
precFunc(useData)
specFunc(useData)
table(useData$class, useData$scored.class)
sensFunc(useData)
sensFunc(useData)
library(caret)
confusionMatrix(useData$class, useData$scored.class, prec_recall = 1)
xtable <- table(useData$class, useData$scored.class)
confusionMatrix(xtab, prec_recall = 1)
confusionMatrix(xtable, prec_recall = 1)
sensFunc(useData)
xtable <- table(useData$scored.class, useData$class, )
xtable <- table(useData$scored.class, useData$class)
confusionMatrix(xtable, prec_recall = 1)
table(useData[1:2])
table(useData[1:2])
table(useData[1:2])
confusionMatrix(xtable, prec_recall = 1)
xtable <- table(useData$class, useData$scored.class, )
xtable <- table(useData$class, useData$scored.class)
confusionMatrix(xtable, prec_recall = 1)
confusionMatrix(xtable, prec_recall = 0)
confusionMatrix(xtable, prec_recall = 1)
confusionMatrix(xtable, positive = 1)
confusionMatrix(xtable, positive = "1")
xtable <- table(useData$scored.class, useData$class)
confusionMatrix(xtable, positive = "1")
table(useData[2:1])
return(list(sensRes))
sensFunc <- function(classDF){
truePos <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 1])
trueNeg <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 0])
falsePos <- length(classDF$class[classDF$class == 0 & classDF$scored.class == 1])
falseNeg <- length(classDF$class[classDF$class == 1 & classDF$scored.class == 0])
sensRes <- (truePos) / (truePos + falseNeg)
return(list(sensRes))
}
sensFunc(useData)
accFunc(useData)
classErrFunc(useData)
precFunc(useData)
sensFunc(useData)
specFunc(useData)
table(useData[1:2])
